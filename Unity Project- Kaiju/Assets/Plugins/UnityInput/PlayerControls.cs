//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.4
//     from Assets/Plugins/UnityInput/PlayerControls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerControls : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerControls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerControls"",
    ""maps"": [
        {
            ""name"": ""Turret"",
            ""id"": ""676e1b00-22f2-406a-8133-9e3761e81ae6"",
            ""actions"": [
                {
                    ""name"": ""aiming"",
                    ""type"": ""Value"",
                    ""id"": ""b8909087-a179-4bbb-a30b-831bb009ab7c"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""shooting"",
                    ""type"": ""Button"",
                    ""id"": ""3f567356-18f8-48b2-8ea8-835bbe9a3f21"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""25f2421a-6e5f-4869-871f-0b0f4a302546"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""aiming"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""down"",
                    ""id"": ""70805fef-6f78-41de-93ba-0eda5ab58afc"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""aiming"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""up"",
                    ""id"": ""a496a887-c509-4b8f-b2e4-122847948bfe"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""aiming"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""0cd5a9ca-e56d-42ba-9aff-8716d52fa9af"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""aiming"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""f918e005-76bc-40de-a58c-d1dedd991af3"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""aiming"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""a635a171-cec0-4b95-9e69-09eb2297ac28"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": ""Press"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""shooting"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""gunner control scheme"",
            ""bindingGroup"": ""gunner control scheme"",
            ""devices"": []
        }
    ]
}");
        // Turret
        m_Turret = asset.FindActionMap("Turret", throwIfNotFound: true);
        m_Turret_aiming = m_Turret.FindAction("aiming", throwIfNotFound: true);
        m_Turret_shooting = m_Turret.FindAction("shooting", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Turret
    private readonly InputActionMap m_Turret;
    private ITurretActions m_TurretActionsCallbackInterface;
    private readonly InputAction m_Turret_aiming;
    private readonly InputAction m_Turret_shooting;
    public struct TurretActions
    {
        private @PlayerControls m_Wrapper;
        public TurretActions(@PlayerControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @aiming => m_Wrapper.m_Turret_aiming;
        public InputAction @shooting => m_Wrapper.m_Turret_shooting;
        public InputActionMap Get() { return m_Wrapper.m_Turret; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(TurretActions set) { return set.Get(); }
        public void SetCallbacks(ITurretActions instance)
        {
            if (m_Wrapper.m_TurretActionsCallbackInterface != null)
            {
                @aiming.started -= m_Wrapper.m_TurretActionsCallbackInterface.OnAiming;
                @aiming.performed -= m_Wrapper.m_TurretActionsCallbackInterface.OnAiming;
                @aiming.canceled -= m_Wrapper.m_TurretActionsCallbackInterface.OnAiming;
                @shooting.started -= m_Wrapper.m_TurretActionsCallbackInterface.OnShooting;
                @shooting.performed -= m_Wrapper.m_TurretActionsCallbackInterface.OnShooting;
                @shooting.canceled -= m_Wrapper.m_TurretActionsCallbackInterface.OnShooting;
            }
            m_Wrapper.m_TurretActionsCallbackInterface = instance;
            if (instance != null)
            {
                @aiming.started += instance.OnAiming;
                @aiming.performed += instance.OnAiming;
                @aiming.canceled += instance.OnAiming;
                @shooting.started += instance.OnShooting;
                @shooting.performed += instance.OnShooting;
                @shooting.canceled += instance.OnShooting;
            }
        }
    }
    public TurretActions @Turret => new TurretActions(this);
    private int m_gunnercontrolschemeSchemeIndex = -1;
    public InputControlScheme gunnercontrolschemeScheme
    {
        get
        {
            if (m_gunnercontrolschemeSchemeIndex == -1) m_gunnercontrolschemeSchemeIndex = asset.FindControlSchemeIndex("gunner control scheme");
            return asset.controlSchemes[m_gunnercontrolschemeSchemeIndex];
        }
    }
    public interface ITurretActions
    {
        void OnAiming(InputAction.CallbackContext context);
        void OnShooting(InputAction.CallbackContext context);
    }
}
